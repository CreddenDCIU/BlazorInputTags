@using Microsoft.AspNetCore.Components.Forms;

@if (Options.DisplayLabel)
{
    <label class="@Options.LabelClass">@Label</label>
}
<div class="@Options.WrapperClass" tabindex="-1">
    <ul class="@Options.TagListClass">
        @foreach (var record in Value)
        {
            var itRecord = record as IInputTagRecord;

            if (itRecord == null) { continue; }
            <li class="@Options.TagClass"><button type="button" title="@Options.RemoveButtonTooltip" @onclick="() => RemoveValue(itRecord)">@itRecord.RecordName <b>&times;</b></button></li>
        }
    </ul>

    <InputSelect class="@Options.InputClass" @bind-Value="Input">
        @foreach (var record in Source)
        {
            var itRecord = record as IInputTagRecord;

            if (itRecord == null) { continue; }
            <option value="@itRecord.RecordId">@itRecord.RecordName</option>
        }
    </InputSelect>
</div>

@code {
    private int _input;
    public int Input
    {
        get => _input;
        set
        {
            if(UpdateValue(value))
            {
                OnTagAdded.InvokeAsync(value);
            }
        }
    }

    private bool _wasSetToEmpty = false;

    [Parameter]
    public string Label { get; set; } = "Tags:";
    [Parameter]
    public List<object> Value { get; set; } = new();
    [Parameter]
    public List<object> Source { get; set; } = new();

    [Parameter]
    public EventCallback<int> OnTagAdded { get; set; }

    [Parameter]
    public EventCallback<int> OnTagRemoved { get; set; }

    [Parameter]
    public InputTagOptions Options { get; set; } = new();

    /// <summary>
    /// Function to validate the user input.
    /// </summary>
    [Parameter]
    public Func<string, Task<bool>>? ValidateTag { get; set; }

    private ElementReference? _reference;

    public Guid Guid { get; set; } = Guid.NewGuid();

    public bool UpdateValue(int input)
    {
        foreach (var record in Value)
        {
            var itRecord = record as IInputTagRecord;
            if (itRecord == null) { continue; }
            if (itRecord.RecordId.Equals(input)) { return false; }
        }

        foreach (var record in Source)
        {
            var itRecord = record as IInputTagRecord;
            if (itRecord == null || !itRecord.RecordId.Equals(input)) { continue; }

            Value.Add(record);
            return true;
        }

        return false;
    }

    public void RemoveValue(IInputTagRecord value)
    {
        if (value == null) { return; }

        Value.Remove(value);
        OnTagRemoved.InvokeAsync(value.RecordId);
    }
}